openapi: 3.0.3
info:
  title: Reddit Clone API
  description: API per un clone di Reddit con post, commenti e voti
  version: 1.0.0

servers:
  - url: http://localhost:8090/api
    description: Server di sviluppo


paths:
  # ======================
  # AUTHENTICATION
  # ======================
  /auth/register:
    post:
      tags: [ Authentication ]
      summary: Registra un nuovo utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Utente registrato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /auth/login:
    post:
      tags: [ Authentication ]
      summary: Login utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login riuscito
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  username:
                    type: string

  # ======================
  # USERS
  # ======================
  /users:
    get:
      tags: [ Users ]
      summary: Lista utenti (paginated)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
          description: Lista di utenti

  /users/{username}:
    get:
      tags: [ Users ]
      summary: Dettagli utente
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Dettagli dell'utente

  # ======================
  # SUBREDDITS
  # ======================
  /subreddits:
    get:
      tags: [ Subreddits ]
      summary: Lista subreddits
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubredditDto'
          description: Lista di subreddits
    post:
      tags: [ Subreddits ]
      summary: Crea un nuovo subreddit
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubredditDto'
      responses:
        201:
          description: Subreddit creato

  /subreddits/{name}:
    get:
      tags: [ Subreddits ]
      summary: Dettagli subreddit
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubredditDto'
          description: Dettagli del subreddit

  # ======================
  # POSTS
  # ======================
  /posts:
    get:
      tags: [ Posts ]
      summary: Lista post (paginated)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostDto'
          description: Lista di post
    post:
      tags: [ Posts ]
      summary: Crea un nuovo post
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDto'
      responses:
        201:
          description: Post creato

  /posts/{id}:
    get:
      tags: [ Posts ]
      summary: Dettagli post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDto'
          description: Dettagli del post

  # ======================
  # COMMENTS
  # ======================
  /posts/{postId}/comments:
    get:
      tags: [ Comments ]
      summary: Lista commenti di un post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
          description: Lista di commenti
    post:
      tags: [ Comments ]
      summary: Aggiungi commento a un post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        201:
          description: Commento creato

  # ======================
  # VOTES
  # ======================
  /posts/{postId}/votes:
    post:
      tags: [ Votes ]
      summary: Aggiungi/modifica voto
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                voteType:
                  type: string
                  enum: [ UPVOTE, DOWNVOTE ]
      responses:
        200:
          description: Voto registrato

components:
  # Reusable parameters
  parameters:
    page:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        default: 0
    size:
      name: size
      in: query
      description: Items per page
      schema:
        type: integer
        default: 20

  # Schemas (come nel precedente esempio)
  schemas:
      # ---- USER ----
      UserDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          username:
            type: string
            example: "mario_rossi"
          email:
            type: string
            format: email
            example: "mario@example.com"
          createdAt:
            type: string
            format: date-time
            example: "2023-10-25T14:30:00Z"
        required:
          - username
          - email

      # ---- SUBREDDIT ----
      SubredditDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          name:
            type: string
            example: "programmazione"
          description:
            type: string
            example: "Tutto su coding e sviluppo software"
          creatorUsername:
            type: string
            example: "mario_rossi"
          createdAt:
            type: string
            format: date-time
        required:
          - name
          - creatorUsername

      # ---- POST ----
      PostDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          title:
            type: string
            example: "Come imparare Java"
          content:
            type: string
            example: "Guida completa a Java e Spring Boot"
          voteCount:
            type: integer
            example: 42
          authorUsername:
            type: string
            example: "mario_rossi"
          subredditName:
            type: string
            example: "programmazione"
          createdAt:
            type: string
            format: date-time
        required:
          - title
          - authorUsername
          - subredditName

      # ---- COMMENT ----
      CommentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          text:
            type: string
            example: "Grazie per la guida!"
          authorUsername:
            type: string
            example: "laura_bianchi"
          postId:
            type: integer
            format: int64
            example: 1
          parentCommentId:
            type: integer
            format: int64
            nullable: true
            example: null
          createdAt:
            type: string
            format: date-time
        required:
          - text
          - authorUsername
          - postId

      # ---- VOTE ----
      VoteDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          voteType:
            type: string
            enum: [ UPVOTE, DOWNVOTE ]
            example: "UPVOTE"
          username:
            type: string
            example: "laura_bianchi"
          postId:
            type: integer
            format: int64
            example: 1
        required:
          - voteType
          - username
          - postId

      # ---- ERROR RESPONSE ----
      ErrorResponse:
            type: object
            properties:
              status:
                type: integer
                format: int32
                example: 400
              message:
                type: string
                example: "Bad Request"
              timestamp:
                type: string
                format: date-time
                example: "2023-10-25T14:30:00Z"
  
  
  # Security scheme
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  