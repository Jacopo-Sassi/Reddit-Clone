openapi: 3.0.3
info:
  title: Reddit Clone API
  description: API per un clone di Reddit con post, commenti e voti
  version: 1.0.0
  contact:
    email: dev@redditclone.example
  license:
    name: MIT

servers:
  - url: http://localhost:8080/api
    description: Server di sviluppo

paths:
  # ======================
  # AUTHENTICATION
  # ======================
  /auth/register:
    post:
      operationId: registerUser
      tags: [ Authentication ]
      summary: Registra un nuovo utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 20
                  pattern: '^[a-zA-Z0-9_]+$'
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  maxLength: 50
      responses:
        201:
          description: Utente registrato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Username o email già in uso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      operationId: loginUser
      tags: [ Authentication ]
      summary: Login utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login riuscito
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  username:
                    type: string
                  expiresIn:
                    type: integer
                    description: Durata del token in secondi
        401:
          description: Credenziali non valide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      operationId: refreshToken
      tags: [ Authentication ]
      summary: Rinnova token JWT
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Token rinnovato
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  username:
                    type: string
                  expiresIn:
                    type: integer
        401:
          description: Token non valido o scaduto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================
  # USERS
  # ======================
  /users:
    get:
      operationId: listUsers
      tags: [ Users ]
      summary: Lista utenti (paginated)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - name: search
          in: query
          description: Filtro per username
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUser'
          description: Lista di utenti
        400:
          description: Parametri di paginazione non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}:
    get:
      operationId: getUser
      tags: [ Users ]
      summary: Dettagli utente
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Dettagli dell'utente
        404:
          description: Utente non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateUser
      tags: [ Users ]
      summary: Aggiorna utente
      security:
        - BearerAuth: [ ]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                bio:
                  type: string
                  maxLength: 255
      responses:
        200:
          description: Utente aggiornato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Non autorizzato a modificare questo utente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Utente non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}/posts:
    get:
      operationId: getUserPosts
      tags: [ Users ]
      summary: Post di un utente (paginated)
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedPost'
          description: Lista di post dell'utente
        404:
          description: Utente non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================
  # SUBREDDITS
  # ======================
  /subreddits:
    get:
      operationId: listSubreddits
      tags: [ Subreddits ]
      summary: Lista subreddits (paginated)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - name: search
          in: query
          description: Filtro per nome subreddit
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedSubreddit'
          description: Lista di subreddits
    post:
      operationId: createSubreddit
      tags: [ Subreddits ]
      summary: Crea un nuovo subreddit
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subreddit'
      responses:
        201:
          description: Subreddit creato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subreddit'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Subreddit con questo nome già esiste
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subreddits/{name}:
    get:
      operationId: getSubreddit
      tags: [ Subreddits ]
      summary: Dettagli subreddit
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subreddit'
          description: Dettagli del subreddit
        404:
          description: Subreddit non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateSubreddit
      tags: [ Subreddits ]
      summary: Aggiorna subreddit
      security:
        - BearerAuth: [ ]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  maxLength: 500
      responses:
        200:
          description: Subreddit aggiornato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subreddit'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Solo il creatore può modificare il subreddit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Subreddit non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteSubreddit
      tags: [ Subreddits ]
      summary: Elimina subreddit
      security:
        - BearerAuth: [ ]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Subreddit eliminato
        403:
          description: Solo il creatore può eliminare il subreddit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Subreddit non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subreddits/{name}/posts:
    get:
      operationId: getSubredditPosts
      tags: [ Subreddits ]
      summary: Post in un subreddit (paginated)
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - name: sort
          in: query
          description: Campo per ordinamento (new, top, hot)
          schema:
            type: string
            enum: [new, top, hot]
            default: new
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedPost'
          description: Lista di post nel subreddit
        404:
          description: Subreddit non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================
  # POSTS
  # ======================
  /posts:
    get:
      operationId: listPosts
      tags: [ Posts ]
      summary: Lista post (paginated)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - name: search
          in: query
          description: Filtro per titolo o contenuto
          schema:
            type: string
        - name: sort
          in: query
          description: Campo per ordinamento (new, top, hot)
          schema:
            type: string
            enum: [new, top, hot]
            default: new
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedPost'
          description: Lista di post
    post:
      operationId: createPost
      tags: [ Posts ]
      summary: Crea un nuovo post
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        201:
          description: Post creato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Subreddit non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    get:
      operationId: getPost
      tags: [ Posts ]
      summary: Dettagli post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: Dettagli del post
        404:
          description: Post non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updatePost
      tags: [ Posts ]
      summary: Aggiorna post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                content:
                  type: string
      responses:
        200:
          description: Post aggiornato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Solo l'autore può modificare il post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Post non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deletePost
      tags: [ Posts ]
      summary: Elimina post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Post eliminato
        403:
          description: Solo l'autore o un admin può eliminare il post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Post non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================
  # COMMENTS
  # ======================
  /posts/{postId}/comments:
    get:
      operationId: getPostComments
      tags: [ Comments ]
      summary: Lista commenti di un post (paginated)
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedComment'
          description: Lista di commenti
        404:
          description: Post non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createComment
      tags: [ Comments ]
      summary: Aggiungi commento a un post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          description: Commento creato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Post o commento padre non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{id}:
    get:
      operationId: getComment
      tags: [ Comments ]
      summary: Dettagli commento
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Dettagli del commento
        404:
          description: Commento non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateComment
      tags: [ Comments ]
      summary: Aggiorna commento
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  maxLength: 1000
      responses:
        200:
          description: Commento aggiornato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Solo l'autore può modificare il commento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Commento non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteComment
      tags: [ Comments ]
      summary: Elimina commento
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Commento eliminato
        403:
          description: Solo l'autore o un admin può eliminare il commento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Commento non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================
  # VOTES
  # ======================
  /posts/{postId}/votes:
    post:
      operationId: votePost
      tags: [ Votes ]
      summary: Aggiungi/modifica voto a un post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                voteType:
                  type: string
                  enum: [ UPVOTE, DOWNVOTE ]
      responses:
        200:
          description: Voto registrato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Post non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: removePostVote
      tags: [ Votes ]
      summary: Rimuovi voto da un post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Voto rimosso
        404:
          description: Post non trovato o voto non esistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{commentId}/votes:
    post:
      operationId: voteComment
      tags: [ Votes ]
      summary: Aggiungi/modifica voto a un commento
      security:
        - BearerAuth: [ ]
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                voteType:
                  type: string
                  enum: [ UPVOTE, DOWNVOTE ]
      responses:
        200:
          description: Voto registrato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Commento non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: removeCommentVote
      tags: [ Votes ]
      summary: Rimuovi voto da un commento
      security:
        - BearerAuth: [ ]
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Voto rimosso
        404:
          description: Commento non trovato o voto non esistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  # Reusable parameters
  parameters:
    page:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        minimum: 0
        default: 0
    size:
      name: size
      in: query
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20

  # Schemas
  schemas:
    # ---- USER ----
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "mario_rossi"
        email:
          type: string
          format: email
          example: "mario@example.com"
        bio:
          type: string
          nullable: true
          example: "Appassionato di programmazione"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"
        postCount:
          type: integer
          description: Numero di post creati
          example: 42
        commentCount:
          type: integer
          description: Numero di commenti creati
          example: 123
      required:
        - username
        - email
        - createdAt

    PagedUser:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    # ---- SUBREDDIT ----
    Subreddit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "programmazione"
        description:
          type: string
          example: "Tutto su coding e sviluppo software"
        creatorUsername:
          type: string
          example: "mario_rossi"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"
        postCount:
          type: integer
          description: Numero di post nel subreddit
          example: 42
        subscriberCount:
          type: integer
          description: Numero di iscritti
          example: 1000
      required:
        - name
        - creatorUsername
        - createdAt

    PagedSubreddit:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Subreddit'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    # ---- POST ----
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Come imparare Java"
        content:
          type: string
          example: "Guida completa a Java e Spring Boot"
        voteCount:
          type: integer
          example: 42
        authorUsername:
          type: string
          example: "mario_rossi"
        subredditName:
          type: string
          example: "programmazione"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"
        commentCount:
          type: integer
          description: Numero di commenti
          example: 10
        userVote:
          type: string
          nullable: true
          enum: [UPVOTE, DOWNVOTE]
          description: Voto dell'utente corrente (se autenticato)
      required:
        - title
        - authorUsername
        - subredditName
        - createdAt

    PagedPost:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    # ---- COMMENT ----
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        text:
          type: string
          example: "Grazie per la guida!"
        authorUsername:
          type: string
          example: "laura_bianchi"
        postId:
          type: integer
          format: int64
          example: 1
        parentCommentId:
          type: integer
          format: int64
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"
        voteCount:
          type: integer
          example: 5
        userVote:
          type: string
          nullable: true
          enum: [UPVOTE, DOWNVOTE]
          description: Voto dell'utente corrente (se autenticato)
        repliesCount:
          type: integer
          description: Numero di risposte
          example: 3
      required:
        - text
        - authorUsername
        - postId
        - createdAt

    PagedComment:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    # ---- VOTE ----
    Vote:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        voteType:
          type: string
          enum: [UPVOTE, DOWNVOTE]
          example: "UPVOTE"
        username:
          type: string
          example: "laura_bianchi"
        postId:
          type: integer
          format: int64
          nullable: true
          example: 1
        commentId:
          type: integer
          format: int64
          nullable: true
          example: null
      required:
        - voteType
        - username

    # ---- ERROR RESPONSE ----
    Error:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed for object='userDto'. Error count: 2"
        timestamp:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"
        path:
          type: string
          example: "/api/auth/register"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "must be a well-formed email address"
      required:
        - status
        - error
        - timestamp
        - path

    # ---- SUBSCRIPTION ----
    Subscription:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "mario_rossi"
        subredditName:
          type: string
          example: "programmazione"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-25T14:30:00Z"

  # Security scheme
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Inserire il token JWT ottenuto dal login (es. "Bearer abc123...")